{"mappings":"AAGOA,eAAeC,EAAaC,GAC/B,MAAMC,EAAS,IAAIC,gBAAgB,CAAEC,QCJlB,qCDKbC,QAAiBC,MAAM,sCAAqBL,KAASC,KAE3D,aADyBG,EAASE,M,CENtC,MAKaC,EAASC,IACpB,IAAIC,EAAUC,aAAaC,QAAQH,GACnC,OAAkBI,KAAKC,MAAMJ,SAAYK,CAAS,ECPpD,MAAMC,EAAgBC,SAASC,cAAc,2BAEtC,SAASC,GAAgBC,OAC9BA,EAAMC,eACNA,EAAcC,SACdA,EAAQC,WACRA,EAAUC,YACVA,EAAWC,MACXA,EAAKC,aACLA,EAAYC,WACZA,EAAUC,GACVA,IAEA,MAAMC,EAAS,mHAE0DL,uHAElCH,gDACDD,EAC7BU,KAAIC,GAASA,EAAMC,OACnBC,KAAK,mCAIdjB,EAAckB,mBAAmB,WAAYL,E,CAvB/CM,QAAQC,IAAIpB,GCGZ,IAAIqB,EAAgB,GAChBC,EAAc,GACdC,EAAa,GAEV,SAASC,IACVhC,EAAO,aACT6B,EAAgB7B,EAAO,YAErBA,EAAO,WACT8B,EAAc9B,EAAO,UAGvB+B,EAAa,IAAIF,KAAkBC,GAEnC,IAAK,IAAIV,KAAMW,EACbvC,EAAa4B,GACVa,MAAKC,GAASvB,EAAgBuB,KAC9BC,OAAMC,GAAST,QAAQC,IAAIQ,I,CAI3B,SAASC,IACVrC,EAAO,aACT6B,EAAgB7B,EAAO,YAGzB,IAAK,IAAIoB,KAAMS,EACbrC,EAAa4B,GACVa,MAAKC,GAASvB,EAAgBuB,KAC9BC,OAAMC,GAAST,QAAQC,IAAIQ,I,CAI3B,SAASE,IACVtC,EAAO,WACT8B,EAAc9B,EAAO,UAGvB,IAAK,IAAIoB,KAAMU,EACbtC,EAAa4B,GACVa,MAAKC,GAASvB,EAAgBuB,KAC9BC,OAAMC,GAAST,QAAQC,IAAIQ,I;yBCjCZ;MAAhBG,EAAa9B,SAASC,cAAc,uBACpC8B,EAAW/B,SAASC,cAAc,qBAExC6B,EAAWE,iBAAiB,SAS5B,WACEJ,G,IATFG,EAASC,iBAAiB,SAY1B,WACEH,G,IAXwC,IAAtCN,EAA2BU,OAC7Bf,QAAQC,IAAI,SAEZI","sources":["src/js/get-movie-by-id.js","src/js/apiFilms/apiKey.js","src/js/modal-button-localstorage.js","src/js/mylibrary-render.js","src/js/mylibrary-buttons-function.js","src/js/mylibrary.js"],"sourcesContent":["import { BASE_URL } from './apiFilms/baseUrl';\nimport { API_KEY } from './apiFilms/apiKey';\n\nexport async function getMovieById(value) {\n    const params = new URLSearchParams({ api_key: API_KEY });\n    const response = await fetch(`${BASE_URL}/movie/${value}?${params}`);\n    const moviesData = await response.json();\n    return moviesData;\n};","export const API_KEY = 'cbb822aa772537b57d5d040000698149'","const setKey = (key, value) => {\n  const movieId = JSON.stringify(value);\n  localStorage.setItem(key, movieId);\n};\n\nexport const getKey = key => {\n  let movieId = localStorage.getItem(key);\n  return (movieId = JSON.parse(movieId) || undefined);\n};\n\nconst removeKey = key => {\n  localStorage.removeItem(key);\n};\n\nexport function textModalButton(id) {\n  const modalWatchedButton = document.querySelector('.btn-add-to-watched');\n  const modalQueueButton = document.querySelector('.btn-add-to-queue');\n\n  if (localStorageCheck(id, 'watched')) {\n    modalWatchedButton.textContent = 'Remove from watched';\n    modalWatchedButton.classList.add('in-mylibrary');\n  } else {\n    modalWatchedButton.textContent = 'Add to watched';\n    modalWatchedButton.classList.remove('in-mylibrary');\n  };\n\n  if (localStorageCheck(id, 'queue')) {\n    modalQueueButton.textContent = 'Remove from queue';\n    modalQueueButton.classList.add('in-mylibrary');\n  } else {\n    modalQueueButton.textContent = 'Add to queue';\n    modalQueueButton.classList.remove('in-mylibrary');\n  };\n\n  function localStorageCheck(id, key) {\n    let array = [];\n    let localStorageArray = getKey(key);\n    if (localStorageArray) {\n      array = [...localStorageArray];\n    };\n    const listSet = new Set(array);\n    return listSet.has(id);\n  };\n};\n\nexport function changeWatchedQueueList(id) {\n    const modalWatchedButton = document.querySelector('.btn-add-to-watched');\n    const modalQueueButton = document.querySelector('.btn-add-to-queue');\n\n    modalWatchedButton.addEventListener('click', addToWatched);\n    modalQueueButton.addEventListener('click', addToQueue);\n\n  function addToWatched() {\n    const modalWatchedButton = document.querySelector('.btn-add-to-watched');\n\n    if (modalWatchedButton.classList.contains('in-mylibrary')) {\n      removeFromWatched(id);\n    } else {\n      let watchedList = [];\n      let userWatchedList = getKey('watched');\n      if (userWatchedList) {\n        watchedList = [...userWatchedList];\n      };\n\n      let queueList = [];\n      let userQueueList = getKey('queue');\n      if (userQueueList) {\n        queueList = [...userQueueList];\n      };\n\n      let queueSet = new Set(queueList);\n      if (queueSet.has(id)) {\n        removeKey('queue');\n        let movieIndex = queueList.indexOf(id);\n        queueList.splice(movieIndex, 1);\n        setKey('queue', queueList);\n      };\n\n      const watchedSet = new Set(watchedList);\n      if (watchedSet.has(id)) {\n        textModalButton(id);\n      } else {\n        watchedList.push(id);\n        setKey('watched', watchedList);\n        textModalButton(id);\n      };\n    };\n  };\n\n  function addToQueue() {\n    const modalQueueButton = document.querySelector('.btn-add-to-queue');\n\n    if (modalQueueButton.classList.contains('in-mylibrary')) {\n      removeFromQueue(id);\n    } else {\n      let queueList = [];\n      let userQueueList = getKey('queue');\n      if (userQueueList) {\n        queueList = [...userQueueList];\n      };\n\n      let watchedList = [];\n      let userWatchedList = getKey('watched');\n      if (userWatchedList) {\n        watchedList = [...userWatchedList];\n      };\n\n      let watchedSet = new Set(watchedList);\n      if (watchedSet.has(id)) {\n        removeKey('watched');\n        let movieIndex = watchedList.indexOf(id);\n        watchedList.splice(movieIndex, 1);\n        setKey('watched', watchedList);\n        textModalButton(id);\n      };\n\n      const queueSet = new Set(queueList);\n      if (queueSet.has(id)) {\n        textModalButton(id);\n      } else {\n        queueList.push(id);\n        setKey('queue', queueList);\n        textModalButton(id);\n      };\n    };\n  };\n\n  function removeFromWatched(id) {\n    let watchedList = [];\n    let userWatchedList = getKey('watched');\n    \n    if (userWatchedList) {\n      watchedList = [...userWatchedList];\n    };\n\n    removeKey('watched');\n\n    let movieIndex = watchedList.indexOf(id);\n    watchedList.splice(movieIndex, 1);\n\n    setKey('watched', watchedList);\n\n    textModalButton();\n  };\n\n  function removeFromQueue(id) {\n    let queueList = [];\n    let userQueueList = getKey('queue');\n\n    if (userQueueList) {\n      queueList = [...userQueueList];\n    };\n\n    removeKey('queue');\n\n    let movieIndex = queueList.indexOf(id);\n    queueList.splice(movieIndex, 1);\n\n    setKey('queue', queueList);\n    \n    textModalButton();\n  };\n};","const myLibraryList = document.querySelector('.mylibrary-film-gallery');\nconsole.log(myLibraryList);\nexport function renderMyLibrary({\n  genres,\n  original_title,\n  overview,\n  popularity,\n  poster_path,\n  title,\n  vote_average,\n  vote_count,\n  id,\n}) {\n  const markup = `\n    <li class=\"film-gallery__item\">\n    <img class=\"film-gallery__image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"Movie poster\" loading=\"lazy\">\n    <div class=\"film-gallery__info\">\n        <p class=\"film-gallery__title\">${original_title}</p>\n        <p class=\"film-gallery__text\">${genres\n          .map(genre => genre.name)\n          .join(', ')}</p>\n    </div>\n    </li>`;\n\n  myLibraryList.insertAdjacentHTML('afterend', markup);\n}\n","import { getMovieById } from './get-movie-by-id';\nimport { getKey } from './modal-button-localstorage';\nimport { renderMyLibrary } from './mylibrary-render';\n\nlet watchedIdList = [];\nlet queueIdList = [];\nlet fullIdList = [];\n\nexport function inWatchedQueueLocalStorage() {\n  if (getKey('watched')) {\n    watchedIdList = getKey('watched');\n  }\n  if (getKey('queue')) {\n    queueIdList = getKey('queue');\n  }\n\n  fullIdList = [...watchedIdList, ...queueIdList];\n\n  for (let id of fullIdList) {\n    getMovieById(id)\n      .then(movie => renderMyLibrary(movie))\n      .catch(error => console.log(error));\n  }\n}\n\nexport function inWatchedLocalStorage() {\n  if (getKey('watched')) {\n    watchedIdList = getKey('watched');\n  }\n\n  for (let id of watchedIdList) {\n    getMovieById(id)\n      .then(movie => renderMyLibrary(movie))\n      .catch(error => console.log(error));\n  }\n}\n\nexport function inQueueLocalStorage() {\n  if (getKey('queue')) {\n    queueIdList = getKey('queue');\n  }\n\n  for (let id of queueIdList) {\n    getMovieById(id)\n      .then(movie => renderMyLibrary(movie))\n      .catch(error => console.log(error));\n  }\n}\n","import {\n  inWatchedQueueLocalStorage,\n  inWatchedLocalStorage,\n  inQueueLocalStorage,\n} from './mylibrary-buttons-function';\n\n//! ДГ - написати логіку:\n// 1) якщо inWatchedQueueLocalStorage() = [] - повідомлення та лінк на головну, якщо ні - запускати inWatchedQueueLocalStorage()\n// 2) прив'язати inWatchedLocalStorage, inQueueLocalStorage до кнопок\n//\n// теоретично має працювати\n\nconst watchedBtn = document.querySelector('.header_btn-watched');\nconst queueBtn = document.querySelector('.header_btn-queue');\n\nwatchedBtn.addEventListener('click', onWatchedBtn);\nqueueBtn.addEventListener('click', onQueueBtn);\n\nif (inWatchedQueueLocalStorage.length === 0) {\n  console.log('пусто');\n} else {\n  inWatchedQueueLocalStorage();\n}\n\nfunction onWatchedBtn() {\n  inWatchedLocalStorage();\n}\n\nfunction onQueueBtn() {\n  inQueueLocalStorage();\n}\n"],"names":["async","$6c43ac829a28d3dc$export$e05fa48ccab9af8","value","params","URLSearchParams","api_key","response","fetch","json","$57c903a797d35134$export$a47fb462a08de82f","key","movieId","localStorage","getItem","JSON","parse","undefined","$3efa0af2152ab69b$var$myLibraryList","document","querySelector","$3efa0af2152ab69b$export$cf5ad1ea4042ab8d","genres","original_title","overview","popularity","poster_path","title","vote_average","vote_count","id","markup","map","genre","name","join","insertAdjacentHTML","console","log","$385dbd2b518766c5$var$watchedIdList","$385dbd2b518766c5$var$queueIdList","$385dbd2b518766c5$var$fullIdList","$385dbd2b518766c5$export$d9cd5b52dfd0b723","then","movie","catch","error","$385dbd2b518766c5$export$7bf0be80908f2793","$385dbd2b518766c5$export$2106721ac255ead1","$ad8c01af5b9c46e5$var$watchedBtn","$ad8c01af5b9c46e5$var$queueBtn","addEventListener","length"],"version":3,"file":"myLibrary.1554a042.js.map"}