{"mappings":"AAEkBA,SAASC,cAAc,Q,ICSzCC,EAXA,WACE,MAAO,CACLC,YAAaH,SAASC,cAAc,iBACpCG,MAAOJ,SAASC,cAAc,aAC9BI,oBAAqBL,SAASM,eAAe,cAC7CC,WAAYP,SAASC,cAAc,uBACnCO,SAAUR,SAASC,cAAc,qBACjCQ,cAAeT,SAASC,cAAc,2B,ECJnCS,eAAeC,EAAaC,GAC/B,MAAMC,EAAS,IAAIC,gBAAgB,CAAEC,QCJlB,qCDKbC,QAAiBC,MAAM,sCAAqBL,KAASC,KAE3D,aADyBG,EAASE,M,CENtC,MAKaC,EAASC,IACpB,IAAIC,EAAUC,aAAaC,QAAQH,GACnC,OAAkBI,KAAKC,MAAMJ,SAAYK,CAAS,ECPpD,MAAMC,EAAgB3B,SAASC,cAAc,2BACtC,SAAS2B,GAAgBC,OAC9BA,EAAMC,eACNA,EAAcC,SACdA,EAAQC,WACRA,EAAUC,YACVA,EAAWC,MACXA,EAAKC,aACLA,EAAYC,WACZA,EAAUC,GACVA,IAEA,MAAMC,EAAS,mHAE0DL,uHAElCH,gDACDD,EAC7BU,KAAIC,GAASA,EAAMC,OACnBC,KAAK,mCAIdf,EAAcgB,mBAAmB,aAAcL,E,CCnBjD,IAAIM,EAAgB,GAChBC,EAAc,GACdC,EAAa,GAuBV,SAASC,IACV5B,EAAO,aACTyB,EAAgBzB,EAAO,YAGzB,IAAK,IAAIkB,KAAMO,EACbjC,EAAa0B,GACVW,MAAKC,GAASrB,EAAgBqB,KAC9BC,OAAMC,GAASC,QAAQC,IAAIF,I,CAI3B,SAASG,IACVnC,EAAO,WACT0B,EAAc1B,EAAO,UAGvB,IAAK,IAAIkB,KAAMQ,EACblC,EAAa0B,GACVW,MAAKC,GAASrB,EAAgBqB,KAC9BC,OAAMC,GAASC,QAAQC,IAAIF,I,CCxClCjD,IAAUK,WAAWgD,iBAAiB,SAStC,WACErD,IAAUO,cAAc+C,UAAY,GACpCtD,IAAUK,WAAWkD,UAAW,EAChCvD,IAAUM,SAASiD,UAAW,EAC9BV,G,IAZF7C,IAAUM,SAAS+C,iBAAiB,SAepC,WACErD,IAAUO,cAAc+C,UAAY,GACpCtD,IAAUM,SAASiD,UAAW,EAC9BvD,IAAUK,WAAWkD,UAAW,EAChCH,G,IDrBK,WACDnC,EAAO,aACTyB,EAAgBzB,EAAO,YAErBA,EAAO,WACT0B,EAAc1B,EAAO,UAGvB2B,EAAa,IAAIF,KAAkBC,GAEnC,IAAK,IAAIR,KAAMS,EACbnC,EAAa0B,GACVW,MAAKC,GAASrB,EAAgBqB,KAC9BC,OAAMC,GAASC,QAAQC,IAAIF,I,CCTlC,GAE0B,GDYjBL,EAAWY,QCXlBN,QAAQC,IAAI,gBCfb,MACC,MAAMM,EAAO,CACXC,aAAc5D,SAASC,cAAc,eACrC4D,cAAe7D,SAASC,cAAc,iBACtC6D,MAAO9D,SAASC,cAAc,kBAC9B8D,KAAM/D,SAASC,cAAc,SAqB/B,SAAS+D,IACPL,EAAKG,MAAMG,UAAUC,OAAO,aAC5BP,EAAKI,KAAKE,UAAUC,OAAO,Y,CApB7BP,EAAKC,aAAaL,iBAAiB,QAASS,GAC5CL,EAAKE,cAAcN,iBAAiB,QAASS,GAE7ChE,SAASuD,iBAAiB,WAAW,SAAUY,GAC/B,WAAVA,EAAE/C,KAAoBuC,EAAKI,KAAKE,UAAUG,SAAS,eACrDT,EAAKG,MAAMG,UAAUC,OAAO,aAC5BP,EAAKI,KAAKE,UAAUC,OAAO,a,IAI/BP,EAAKG,MAAMP,iBAAiB,SAC5B,SAAsBc,GACW,kBAA3BA,EAAMC,OAAOC,YACfZ,EAAKG,MAAMG,UAAUC,OAAO,aAC5BP,EAAKI,KAAKE,UAAUC,OAAO,a,GAQhC,EA9BA","sources":["src/js/spinner.js","src/js/refs.js","src/js/get-movie-by-id.js","src/js/apiFilms/apiKey.js","src/js/modal-button-localstorage.js","src/js/mylibrary-render.js","src/js/mylibrary-buttons-function.js","src/js/myLibraryFunction.js","src/js/modal-team.js"],"sourcesContent":["import LoadMoreBtn from './load-more-btn';\n\nconst container = document.querySelector('body');\n\n// window.addEventListener('load', function() {\n// displayLoader();\n// });\n\nexport function displayLoader() {\n  const loader = document.querySelector('.loader');\n  if (loader) loader.classList.remove('disable');\n}\n\nexport function disableLoader() {\n  // setTimeout(() => {\n  const loader = document.querySelector('.loader');\n  if (loader) loader.classList.add('disable');\n  // }, 1400);\n  // container.classList.add('.loader-background');\n}\n\n// const loadMoreBtn = new LoadMoreBtn({\n//     selector: '[data-action=\"load-more\"]',\n//     hidden: true,\n// });\n","function getRefs() {\n  return {\n    filmGallery: document.querySelector('.film-gallery'),\n    guard: document.querySelector('.guard-js'),\n    containerPagination: document.getElementById('pagination'),\n    watchedBtn: document.querySelector('.header_btn-watched'),\n    queueBtn: document.querySelector('.header_btn-queue'),\n    myLibraryList: document.querySelector('.mylibrary-film-gallery'),\n  };\n}\n\nexport default getRefs;\n\n// увага!   іпортуемо таким чином!\n//  але дивіться на якому рівнв ваша папка\n// приклад:\n// import getRefs from './refs';\n// const { filmGallery, guard } = getRefs();\n","import { BASE_URL } from './apiFilms/baseUrl';\nimport { API_KEY } from './apiFilms/apiKey';\n\nexport async function getMovieById(value) {\n    const params = new URLSearchParams({ api_key: API_KEY });\n    const response = await fetch(`${BASE_URL}/movie/${value}?${params}`);\n    const moviesData = await response.json();\n    return moviesData;\n};","export const API_KEY = 'cbb822aa772537b57d5d040000698149'","const setKey = (key, value) => {\n  const movieId = JSON.stringify(value);\n  localStorage.setItem(key, movieId);\n};\n\nexport const getKey = key => {\n  let movieId = localStorage.getItem(key);\n  return (movieId = JSON.parse(movieId) || undefined);\n};\n\nconst removeKey = key => {\n  localStorage.removeItem(key);\n};\n\nexport function textModalButton(id) {\n  const modalWatchedButton = document.querySelector('.btn-add-to-watched');\n  const modalQueueButton = document.querySelector('.btn-add-to-queue');\n\n  if (localStorageCheck(id, 'watched')) {\n    modalWatchedButton.textContent = 'Remove from watched';\n    modalWatchedButton.classList.add('in-mylibrary');\n  } else {\n    modalWatchedButton.textContent = 'Add to watched';\n    modalWatchedButton.classList.remove('in-mylibrary');\n  };\n\n  if (localStorageCheck(id, 'queue')) {\n    modalQueueButton.textContent = 'Remove from queue';\n    modalQueueButton.classList.add('in-mylibrary');\n  } else {\n    modalQueueButton.textContent = 'Add to queue';\n    modalQueueButton.classList.remove('in-mylibrary');\n  };\n\n  function localStorageCheck(id, key) {\n    let array = [];\n    let localStorageArray = getKey(key);\n    if (localStorageArray) {\n      array = [...localStorageArray];\n    };\n    const listSet = new Set(array);\n    return listSet.has(id);\n  };\n};\n\nexport function changeWatchedQueueList(id) {\n    const modalWatchedButton = document.querySelector('.btn-add-to-watched');\n    const modalQueueButton = document.querySelector('.btn-add-to-queue');\n\n    modalWatchedButton.addEventListener('click', addToWatched);\n    modalQueueButton.addEventListener('click', addToQueue);\n\n  function addToWatched() {\n    const modalWatchedButton = document.querySelector('.btn-add-to-watched');\n\n    if (modalWatchedButton.classList.contains('in-mylibrary')) {\n      removeFromWatched(id);\n    } else {\n      let watchedList = [];\n      let userWatchedList = getKey('watched');\n      if (userWatchedList) {\n        watchedList = [...userWatchedList];\n      };\n\n      let queueList = [];\n      let userQueueList = getKey('queue');\n      if (userQueueList) {\n        queueList = [...userQueueList];\n      };\n\n      let queueSet = new Set(queueList);\n      if (queueSet.has(id)) {\n        removeKey('queue');\n        let movieIndex = queueList.indexOf(id);\n        queueList.splice(movieIndex, 1);\n        setKey('queue', queueList);\n      };\n\n      const watchedSet = new Set(watchedList);\n      if (watchedSet.has(id)) {\n        textModalButton(id);\n      } else {\n        watchedList.push(id);\n        setKey('watched', watchedList);\n        textModalButton(id);\n      };\n    };\n  };\n\n  function addToQueue() {\n    const modalQueueButton = document.querySelector('.btn-add-to-queue');\n\n    if (modalQueueButton.classList.contains('in-mylibrary')) {\n      removeFromQueue(id);\n    } else {\n      let queueList = [];\n      let userQueueList = getKey('queue');\n      if (userQueueList) {\n        queueList = [...userQueueList];\n      };\n\n      let watchedList = [];\n      let userWatchedList = getKey('watched');\n      if (userWatchedList) {\n        watchedList = [...userWatchedList];\n      };\n\n      let watchedSet = new Set(watchedList);\n      if (watchedSet.has(id)) {\n        removeKey('watched');\n        let movieIndex = watchedList.indexOf(id);\n        watchedList.splice(movieIndex, 1);\n        setKey('watched', watchedList);\n        textModalButton(id);\n      };\n\n      const queueSet = new Set(queueList);\n      if (queueSet.has(id)) {\n        textModalButton(id);\n      } else {\n        queueList.push(id);\n        setKey('queue', queueList);\n        textModalButton(id);\n      };\n    };\n  };\n\n  function removeFromWatched(id) {\n    let watchedList = [];\n    let userWatchedList = getKey('watched');\n    \n    if (userWatchedList) {\n      watchedList = [...userWatchedList];\n    };\n\n    removeKey('watched');\n\n    let movieIndex = watchedList.indexOf(id);\n    watchedList.splice(movieIndex, 1);\n\n    setKey('watched', watchedList);\n\n    textModalButton();\n  };\n\n  function removeFromQueue(id) {\n    let queueList = [];\n    let userQueueList = getKey('queue');\n\n    if (userQueueList) {\n      queueList = [...userQueueList];\n    };\n\n    removeKey('queue');\n\n    let movieIndex = queueList.indexOf(id);\n    queueList.splice(movieIndex, 1);\n\n    setKey('queue', queueList);\n    \n    textModalButton();\n  };\n};","const myLibraryList = document.querySelector('.mylibrary-film-gallery');\nexport function renderMyLibrary({\n  genres,\n  original_title,\n  overview,\n  popularity,\n  poster_path,\n  title,\n  vote_average,\n  vote_count,\n  id,\n}) {\n  const markup = `\n    <li class=\"film-gallery__item\">\n    <img class=\"film-gallery__image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"Movie poster\" loading=\"lazy\">\n    <div class=\"film-gallery__info\">\n        <p class=\"film-gallery__title\">${original_title}</p>\n        <p class=\"film-gallery__text\">${genres\n          .map(genre => genre.name)\n          .join(', ')}</p>\n    </div>\n    </li>`;\n\n  myLibraryList.insertAdjacentHTML('afterbegin', markup);\n}\n","import { getMovieById } from './get-movie-by-id';\nimport { getKey } from './modal-button-localstorage';\nimport { renderMyLibrary } from './mylibrary-render';\n\nlet watchedIdList = [];\nlet queueIdList = [];\nlet fullIdList = [];\n\nexport function inWatchedQueueLocalStorage() {\n  if (getKey('watched')) {\n    watchedIdList = getKey('watched');\n  }\n  if (getKey('queue')) {\n    queueIdList = getKey('queue');\n  }\n\n  fullIdList = [...watchedIdList, ...queueIdList];\n\n  for (let id of fullIdList) {\n    getMovieById(id)\n      .then(movie => renderMyLibrary(movie))\n      .catch(error => console.log(error));\n  }\n}\n\nexport function getFullListCount() {\n  return fullIdList.length;\n}\n\nexport function inWatchedLocalStorage() {\n  if (getKey('watched')) {\n    watchedIdList = getKey('watched');\n  }\n\n  for (let id of watchedIdList) {\n    getMovieById(id)\n      .then(movie => renderMyLibrary(movie))\n      .catch(error => console.log(error));\n  }\n}\n\nexport function inQueueLocalStorage() {\n  if (getKey('queue')) {\n    queueIdList = getKey('queue');\n  }\n\n  for (let id of queueIdList) {\n    getMovieById(id)\n      .then(movie => renderMyLibrary(movie))\n      .catch(error => console.log(error));\n  }\n}\n","import getRefs from './refs';\nimport { getFullListCount } from './mylibrary-buttons-function';\n\nimport {\n  inWatchedQueueLocalStorage,\n  inWatchedLocalStorage,\n  inQueueLocalStorage,\n} from './mylibrary-buttons-function';\n\ngetRefs().watchedBtn.addEventListener('click', onWatchedBtn);\ngetRefs().queueBtn.addEventListener('click', onQueueBtn);\n\ninWatchedQueueLocalStorage();\n\nif (getFullListCount() == 0) {\n  console.log('НЕТУ ФИЛЬМОВ');\n}\n\nfunction onWatchedBtn() {\n  getRefs().myLibraryList.innerHTML = '';\n  getRefs().watchedBtn.disabled = true;\n  getRefs().queueBtn.disabled = false;\n  inWatchedLocalStorage();\n}\n\nfunction onQueueBtn() {\n  getRefs().myLibraryList.innerHTML = '';\n  getRefs().queueBtn.disabled = true;\n  getRefs().watchedBtn.disabled = false;\n  inQueueLocalStorage();\n}\n","(() => {\n  const refs = {\n    openModalBtn: document.querySelector('.modal-open'),\n    closeModalBtn: document.querySelector('.modal__close'),\n    modal: document.querySelector('.backdrop-team'),\n    body: document.querySelector('body'),\n  };\n\n  refs.openModalBtn.addEventListener('click', toggleModal);\n  refs.closeModalBtn.addEventListener('click', toggleModal);\n\n  document.addEventListener('keydown', function (e) {\n    if (e.key === 'Escape' && refs.body.classList.contains('no-scroll')) {\n      refs.modal.classList.toggle('is-hidden');\n      refs.body.classList.toggle('no-scroll');\n    }\n  });\n\n  refs.modal.addEventListener('click', onClickClose);\n  function onClickClose(event) {\n    if (event.target.className === 'backdrop-team') {\n      refs.modal.classList.toggle('is-hidden');\n      refs.body.classList.toggle('no-scroll');\n    }\n  }\n\n  function toggleModal() {\n    refs.modal.classList.toggle('is-hidden');\n    refs.body.classList.toggle('no-scroll');\n  }\n})();\n"],"names":["document","querySelector","$ee27a4d7c64fc8c4$export$2e2bcd8739ae039","filmGallery","guard","containerPagination","getElementById","watchedBtn","queueBtn","myLibraryList","async","$6c43ac829a28d3dc$export$e05fa48ccab9af8","value","params","URLSearchParams","api_key","response","fetch","json","$57c903a797d35134$export$a47fb462a08de82f","key","movieId","localStorage","getItem","JSON","parse","undefined","$3efa0af2152ab69b$var$myLibraryList","$3efa0af2152ab69b$export$cf5ad1ea4042ab8d","genres","original_title","overview","popularity","poster_path","title","vote_average","vote_count","id","markup","map","genre","name","join","insertAdjacentHTML","$385dbd2b518766c5$var$watchedIdList","$385dbd2b518766c5$var$queueIdList","$385dbd2b518766c5$var$fullIdList","$385dbd2b518766c5$export$7bf0be80908f2793","then","movie","catch","error","console","log","$385dbd2b518766c5$export$2106721ac255ead1","addEventListener","innerHTML","disabled","length","refs","openModalBtn","closeModalBtn","modal","body","toggleModal","classList","toggle","e","contains","event","target","className"],"version":3,"file":"myLibrary.adddc08d.js.map"}